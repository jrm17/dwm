#!/bin/bash

# Simple dot file management script using git & rsync
# Written by Nathaniel Maia, November 2017 - February 2019

# immutable values
typeset -gr NAME="${0##*/}"
typeset -gr CFG="$HOME/.${NAME}rc"
typeset -i BACKUP RESTORE PUSH # ints

usage()
{
    cat <<EOF
USAGE:  $NAME [OPTIONS]

OPTIONS:
        -h         Display this usage message
        -b         Backup files listed in $CFG
        -r         Restore a previous backup
        -c         Clean existing backup
        -p         Push changes to git origin

 Configuration is done in ~/.${NAME}rc
 A default will be created if it doesn't exist.

 Without any options a selection menu is opened
EOF
}

clean_dir()
{
    [[ ! -d $BPATH/$BDIR ]] || rm -rf "$BPATH/${BDIR:?}" >/dev/null 2>&1
}

prep_dir()
{
    [[ $BPATH ]] || { echo "BPATH must be set in config."; return 1; }
    [[ $REPO ]] || { mkdir -p "$BPATH"; return 0; }
    [[ -d $BPATH/.git ]] && cd "$BPATH" && echo "updating git repo to avoid conflicts"; git pull && return 0
    rm -rf "$BPATH" >/dev/null 2>&1
    git clone "$REPO" "$BPATH"
}

backup()
{
    (( ${#BKPS[@]} )) || { printf "no paths to backup..\nconfiguration is done in ~/.${NAME}rc\n"; return 1; }
    [[ $BDIR == *'../'* ]] && { echo "error: using ../ in BDIR put you out of bounds.."; return 1; }
    local to="$BPATH/$BDIR" from=""
    mkdir -pv "$to"
    for i in "${BKPS[@]}"; do
        from="$i"
        [[ -e "$from" ]] && rsync -aRvh "$from" "$to"
    done
    (( ! PUSH )) && return || git_commit
}

restore()
{
    [[ -d $BPATH/$BDIR ]] || { echo "error: missing directory: $BPATH/$BDIR"; return 1; }
    local to='' from='' ans=''

    printf "\nThis will overwrite the following files with the backups stored in %s\n\n" "$BPATH/$BDIR"
    printf "\t%s\n" "${BKPS[@]}"
    read -re -p 'Do you want to continue? [y/N]: ' ans
    [[ $ans == 'y' || $ans == 'Y' ]] || return 1

    for i in "${BKPS[@]}"; do
        to="$i" from="$BPATH/${BDIR}${i}"
        [[ -e $from ]] || continue
        [[ -d $from ]] && { from+='/.' to+='/'; }
        if [[ $i == /home/* ]]; then
            rsync -avh "$from" "$to"
        else
            sudo rsync -avh "$from" "$to"
        fi
    done
}

git_commit()
{
    [[ $REPO ]] && cd "$BPATH/" || return 1
    git add .
    read -re -p $'\nEnter a short summary of this commit.\n\n> ' msg
    git commit -m "${msg:-$(date +%a-%D) update}"
    git push origin "${BRANCH:-HEAD}"
}

pick_menu()
{
    printf "\e[H\e[2J\n"
    options=("Backup" "Restore" "Clean and backup" "Clean, backup, and push")
    PS3=$'\nEnter selection (0/q to exit): '
    if (( ${#REPO} )); then
        select OPT in "${options[@]}"; do break; done
    else
        select OPT in "${options[0]}" "${options[1]}" "${options[2]}"; do break; done
    fi
    clear
    case "$OPT" in
        "${options[0]}") BACKUP=1 ;;
        "${options[1]}") RESTORE=1 ;;
        "${options[2]}") BACKUP=1; clean_dir ;;
        "${options[3]}") BACKUP=1 PUSH=1; clean_dir ;;
        *) exit 0 ;;
    esac
}

mk_cfg()
{
    cat > "$CFG" << EOF
# dfm config file
# sourced as a bash script, this allows command substitution,
# brace expansion, additional scripting, and anything else that works.

# git repo url for cloning/pushing (leave empty for local backup). If this
# is set to a non-existant url or a url that isn't a git repo, expect errors
REPO=""

# git branch used when pushing changes, defaults to HEAD
BRANCH=""

# location for backup/dotfile folder or repo to be created/cloned
BPATH=""

# name for the directory to use/create in BPATH.
BDIR="configs"

# file paths to back up as BPATH/BDIR/BKPS
# qoutes surround paths that contain spaces or expect errors
BKPS=()

# vim:ft=sh
EOF
    printf "New config created: %s\n\nIt needs to be configured before %s will do anything\n" "$CFG" "$NAME"
    exit 0
}

main()
{
    prep_dir || exit 1

    if (( BACKUP )); then
        backup && echo "Backup complete"
    elif (( RESTORE )); then
        restore && echo "Restore complete"
    elif (( PUSH )); then
        git_commit && echo "Git commit complete"
    fi
}

# source config if it exists, if not create one
. "$CFG" 2>/dev/null || mk_cfg

if ! hash rsync >/dev/null 2>&1; then
    echo "error: this requires rsync installed"; exit 1
elif (( ${#REPO} )) && ! hash git >/dev/null 2>&1; then
    echo "error: this requires git installed"; exit 1
fi

# parse command line options
if (( $# == 0 )); then
    pick_menu
else
    while getopts ":hbrcp" OPT; do case "$OPT" in
        h) usage; exit 0 ;;
        b) BACKUP=1 ;;
        r) RESTORE=1 ;;
        c) clean_dir ;;
        p) PUSH=1 ;;
        \?) echo "error: invalid option: -$OPTARG"; exit 1 ;;
    esac done
fi

# run the selected/passed operation(s)
(( BACKUP || RESTORE || PUSH )) && main

# vim:ft=sh:fdm=marker:fmr={,}
