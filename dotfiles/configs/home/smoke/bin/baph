#!/bin/bash

# vim:fdm=marker:fmr={,}

# Simple tool to update and install AUR packages for Arch Linux
# Written by Nathaniel Maia, September 2018 - January 2019
# This software is provided free of charge and WITHOUT warranty

typeset -g NOVIEW='' NOCONF='' AURONLY='' CACHE=1
typeset -r BLD="$HOME/.cache/aur_builds"
typeset -r AUR='https://aur.archlinux.org'
typeset -r AURC="$AUR/cgit/aur.git/snapshot" # snapshots for curl download
typeset -a APKGS=() PPKGS=()
typeset -A DESC=([s]='search' [u]='update' [i]='install')
typeset -A OPTS=([s]='RUN=search' [u]='RUN=update' [i]='RUN=installp' [n]='NOVIEW=--noview' [N]='NOCONF=--noconfirm' [a]='AURONLY=--auronly')

use()
{ # show the standard UNIX style help message..
	if [[ $1 == '-v' ]]; then
		cat << EOF

 baph v0.5

EOF
else
	cat <<EOF

 baph - Simple helper to search, install, and update AUR packages

 usage: baph <operation> [options] [package(s)]

 operations:
	 baph {-h --help}
	 baph {-v --version}
	 baph {-s --search}  <query(s)>
	 baph {-u --update}  [options] [package(s)]
	 baph {-i --install} [options] <package(s)>

 options:
	 --noview, -n       Skip viewing PKGBUILD files
	 --auronly, -a      Only operate on AUR packages
	 --noconfirm, -N    Skip confirmation dialogs

 examples:
	 install 'google-chrome' and 'yay' from the AUR
		 baph -i google-chrome yay

	 search for AUR packages matching 'cmus'
		 baph -s cmus

	 update only the AUR packages on the system, skip view/confirm dialogs
		 baph -uanN

EOF
fi
exit 0
}

msg()
{ # print heading $1 then message $2 in bold, usage: msg "heading "text"
	printf "$1\e[0m \e[1m$2\e[0m\n"
}

die()
{ # print string $1 and exit with error code $2, usage: die "text" exitcode
	printf "\e[1;31merror:\e[0m\t$1\n" && exit ${2:-1}
}

yesno()
{ # ask confirmation if NOCONF is not set, usage: yesno "question"
	[[ $NOCONF ]] && return 0 || { read -re -p $'\e[34m::\e[0m \e[1m'"$1"$'? [Y/n]\e[0m ' c; }
	[[ -z $c || $c =~ ^[yY]$ ]]
}

query()
{ # return key value $1 from json/dict $2, usage: query "key" "input"
	awk -F'","' -v k="$1" '{
	for (i=1; i <= NF; i++) { if ($i ~ k) print $i }
	}' <<< "$2" | sed 's/.*'"$1"'":"\?\(.*\),\?"\?.*/\1/g; s/[,"]$//g; s/[\\%]//g; s/null,".*$/null/'
}

search()
{ # search query the AUR, usage: search "query"
	for q in "$@"; do
		msg '\e[34m::' "Searching the AUR for '$q'..."
		typeset res=$(curl -L# -m 10 "$AUR"'/rpc.php?type=search&arg='"$q")
		printf "\e[1A\e[1G\e[K"
		if [[ -z $res || $res == *'"resultcount":0'* ]]; then
			printf "\e[1;31m:: \e[0mno results found\n"
		else
			typeset -i j=1
			typeset -a pkgs=()
			typeset OLD_IFS="$IFS" msg=""
			IFS=$'\n'
			for i in $(sed 's/},{/\n/g' <<< "$res"); do
				n=$(query "Name" "$i") v=$(query "Version" "$i") d=$(query "Description" "$i")
				(( ${#d} > ${COLUMNS:-$(tput cols)} )) && d=$(sed 's/\([\.,]\)/\1\\n   /' <<< "$d")
				[[ $(query "OutOfDate" "$i") != null ]] && v+="\e[1;31m  (Out of Date!)"
				printf "\e[1;33m$j\e[1;35m AUR/\e[1;37m$n \e[1;32m$v\n\e[0m    $d\n"
				(( j++ ))
				pkgs+=("${n//[()]/}")
			done
			IFS="$OLD_IFS"
			if (( j > 1 )); then
				read -re -p $'\n\nEnter package number(s) to install: ' id
				if [[ $id && $id =~ [0-9] ]]; then
					for i in $(printf "%s" "$id"); do case $i in
						''|*[!0-9]*) : ;;
						*) APKGS+=("${pkgs[$id - 1]}") ;;
					esac done
					(( ${#APKGS[@]} == 0 )) || installp
				fi
			fi
		fi
	done
}

update()
{ # check updates for each package, usage: update
	typeset -a up=()
	typeset i="" n="" o=""
	if (( ${#APKGS[@]} == 0 )); then
		APKGS=($(pacman -Qqm 2>/dev/null))
		[[ $AURONLY ]] || sudo pacman -Syyu $NOCONF
	fi
	if (( ${#APKGS[@]} > 0 )); then
		msg '\e[34m::' "Synchronizing AUR package versions..."
		typeset q="${APKGS[*]}"
		typeset -a n=( $(curl -L# "$AUR/packages/{${q// /,}}" | awk '/Details:/ {sub(/<\/h.?>/,""); print $4}') )
		typeset -a o=( $(pacman -Q "${APKGS[@]}" | awk '{print $2}') )
		for ((i=0; i < ${#APKGS[@]}; i++)); do
			if [[ ${n[i]} && ${o[i]} && $(vercmp "${o[i]}" "${n[i]}") -gt 0 ]]; then
				up+=("${APKGS[i]}")
				printf " %s \e[1m\e[31m%s \e[33m->\e[32m %s\e[0m\n" "${APKGS[i]}" "${n[i]}" "${o[i]}"
			fi
		done
		msg '\e[34m::' "Starting AUR package upgrade..."
		if (( ${#up[@]} > 0 )); then
			printf "\n\e[1mPackages (%s)\e[0m %s\n\n" "${#up[@]}" "${up[*]}"
			yesno "Proceed with package upgrade" && for i in "${up[@]}"; do get "$i"; done
		else
			msg " there is nothing to do"
		fi
	else
		msg '\e[34m::' "No AUR packages installed.."
	fi
	exit 0
}

installp()
{ # loop over package array and install each.. usage: installp
	typeset v=""
	if (( ${#APKGS[@]} == 0 && ${#PPKGS[@]} == 0 )); then
		die "no targets specified"
	else
		(( ${#AURONLY} == 0 && ${#PPKGS[@]} > 0 )) && { sudo pacman -S "${PPKGS[@]}" $NOCONF || exit 1; }
		for pkg in "${APKGS[@]}"; do
			v="$(curl -sLI -m 10 "$AUR/packages/$pkg" | awk 'NR==1 {print $2}')"
			(( v == 200 )) || die "$v response from $AUR/packages/$pkg\n\ncheck the package name is spelled correctly"
			get "$pkg" || msg '\e[33m::' "Exited $pkg build early"
		done
	fi
}

get()
{ # install an AUR package.. usage: get "package"
	(( CACHE == 1 )) || [[ -d "$BLD/$1" ]] && rm -rf "$BLD/$1"
	[[ -d "$BLD/" ]] || mkdir -p "$BLD/"
	if ! hash git >/dev/null 2>&1 || [[ ! -e $BLD/$1/PKGBUILD || $CACHE -eq 0 ]]; then
		msg '\e[34m::' "Retrieving package: $1"
		[[ -d "$BLD/$1" ]] && rm -rf "$BLD/$1"
		[[ -e "$BLD/$1.tar.gz" ]] && rm -rf "$BLD/$1.tar.gz"
		cd "$BLD/" && { curl -LO# -m 15 "$AURC/$1.tar.gz" || git clone "$AUR/$1"; } || die "failed to get package: $1"
		if [[ -e "$BLD/$1.tar.gz" ]]; then
			tar -xvf "$1.tar.gz" || die "failed to extract package archive: $1.tar.gz"
			rm -rf "$BLD/$1.tar.gz"
		fi
	elif [[ -e "$BLD/$1/PKGBUILD" && -d "$BLD/$1/.git" ]]; then
		msg '\e[34m::' "Synchronizing \e[32m$1\e[0m\e[1m cache..."
		cd "$BLD/$1" && git pull >/dev/null 2>&1 || die "failed to update package repo: $AUR/$1"
	fi
	[[ -r "$BLD/$1/PKGBUILD" ]] && cd "$BLD/$1" || die "$BLD/$1 does not contain a PKGBUILD or it is not readable"
	view "$1" "$BLD/$1/PKGBUILD" || yesno "Continue building $1" || { (( CACHE == 1 )) || rm -rf "$BLD/$1"; return 1;}
	buildp "$1" "$BLD/$1/PKGBUILD" || return 1
	return 0
}

view()
{ # view PKGBUILD.. usage: view "package" "/path/to/PKGBUILD"
	if [[ -z $NOVIEW ]] && yesno "View/Edit the PKGBUILD for $1"; then
		${EDITOR:-vi} "$2"
		return 1
	fi
	return 0
}

buildp()
{ # build package.. usage: buildp "package" "/path/to/PKGBUILD"
	typeset -i i o
	typeset -a depends makedepends validpgpkeys

	while read -r l; do
		[[ $l =~ ^[\ \	]*# ]] && continue
		case "$l" in
			depends=*|makedepends=*|validpgpkeys=*) i=1; [[ $l == *')'* ]] && o=1 ;;
			*')'*) (( i )) && o=1 ;;
		esac
		(( i )) && { [[ $t ]] && t+=$'\n'"$l" || t="$l"; }
		(( o )) && o=0 i=0
	done < "$1"
	eval "$t" # better than `eval PKGBUILD` but still sub-optimal
	(( ${#validpgpkeys[@]} > 0 )) && keys "${validpgpkeys[@]}"
	(( ${#depends[@]} > 0 || ${#makedepends} > 0 )) && deps "$1" "${depends[@]}" "${makedepends[@]}"
	makepkg -sicr && { rm -rf ./*.tar.xz >/dev/null 2>&1 || return 0; }
}

keys()
{ # import PGP keys from package.. usage: keys ${KEYS[@]}
	for key in "$@"; do
		if ! pacman-key --list-keys | grep -q "$key"; then
			msg '\e[33m::' "Resolving missing pgp key: $key"
			if ! gpg --receive-keys "$key" && sudo pacman-key -r "$key" && sudo pacman-key --lsign-key "$key"; then
				msg '\e[33m::' "Failed to import pgp key, continuing anyway"
			fi
		fi
	done
}

deps()
{ # build package depends.. usage: deps "package" ${DEPENDS[@]}
	typeset pdir="$1"
	shift
	for i in "$@"; do
		dep="$(sed 's/[=<>]=\?[0-9.\-]*\?//g' <<< "$i")"
		if ! { pacman -Qsq "^$dep$" || pacman -Ssq "^$dep$"; } >/dev/null 2>&1; then
			msg '\e[33m::' "Resolving \e[32m$1\e[0m\e[1m AUR dependency: $dep"
			get "$dep" || die "failed to build dependency $dep"
		fi
	done
	cd "$BLD/$pdir" || die "failed to cd $BLD/$pdir"
}

args()
{ # parse additional command line arguments.. usage: args $@
	[[ $arg == *n* ]] && NOVIEW="--noview"
	[[ $arg == *a* ]] && AURONLY="--auronly"  # shit hack way to get grouped short options
	[[ $arg == *N* ]] && NOCONF="--noconfirm" # working as expected eg. -uaN  or -inN
	for i in "$@"; do case "$i" in
		--noview|-n) NOVIEW="--noview" ;;
		--auronly|-a) AURONLY="--auronly" ;;
		--noconfirm|-N) NOCONF="--noconfirm" ;;
		-*) die "invalid option -- '$i'" ;;
		*) pacman -Ssq "^$i$" >/dev/null 2>&1 && PPKGS+=("$i") || APKGS+=("$i")
	esac; shift; done
}

trap 'echo; exit' SIGINT # catch ^C

if (( ! UID )); then
	die "do not run baph as root"
elif (( ! $# )); then
	die "no operation specified (use -h for help)"
elif ! hash sudo pacman curl >/dev/null 2>&1; then
	die "this requires to following packages: sudo pacman curl\n\n\toptional packages: git"
else
	RUN='' ARGS=''
	for i in "$@"; do # shift long opts to short form
		case "$i" in
			--version|--help|--search|--install|--update|--noview|--auronly|--noconfirm)
				[[ $i == '--noconfirm' ]] && i="${i^^}"
				[[ $ARGS == *"${i:2:1}"* ]] || ARGS+="${i:1:2}" ;;
			--*) die "invalid option: '$i'"; exit 1 ;;
			-*) [[ $ARGS == *"${i:1:1}"* ]] || ARGS+="$i " ;;
			*) [[ $ARGS == *"$i"* ]] || ARGS+="$i " ;;
		esac
	done
	eval set -- "$ARGS"
	while getopts ":hvuisanN" OPT; do
		case "$OPT" in
			h|v) use -$OPT ;;
			n|N|a|s|u|i)
				[[ $OPT =~ (s|u|i) && $RUN ]] && die "${DESC[$OPT]} and $RUN cannot be used together"
				eval "${OPTS[$OPT]}" ;;
			\?) die "invalid option: '$OPTARG'"; exit 1 ;;
		esac
	done
	shift $((OPTIND - 1))
	if [[ $RUN == 'search' ]]; then
		(( $# > 0 )) || die "search requires a query"
		$RUN "$@"
	else
		for i in "$@"; do
			pacman -Ssq "^$i$" >/dev/null 2>&1 && PPKGS+=("$i") || APKGS+=("$i")
		done
		$RUN
	fi
fi

